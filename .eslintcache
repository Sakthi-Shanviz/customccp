[{"C:\\Users\\ssakthi8\\pega_ccp\\src\\index.js":"1","C:\\Users\\ssakthi8\\pega_ccp\\src\\App.js":"2","C:\\Users\\ssakthi8\\pega_ccp\\src\\reportWebVitals.js":"3","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\store.js":"4","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\metadata.js":"5","C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\external\\external.jsx":"6","C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\layout\\layout.jsx":"7","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\initialState.js":"8","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\index.js":"9","C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\metrics\\metrics.jsx":"10","C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\historic-report\\historic-report.jsx":"11","C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\agents\\agents.jsx":"12","C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\contact-flow-prompts\\contact-flow-prompts.jsx":"13","C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\attribute-report\\attribute-report.jsx":"14","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\index.js":"15","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\app-header\\app-header.jsx":"16","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\aws-ccp\\aws-ccp.jsx":"17","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\app-footer\\app-footer.jsx":"18","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\contact.js":"19","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\agent.js":"20","C:\\Users\\ssakthi8\\pega_ccp\\src\\utilities\\ccp-state.js":"21","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\connectPrompts.js":"22","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\queue.js":"23","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\contactFlows.js":"24","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\contact.js":"25","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\metadata.js":"26","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\metrics.js":"27","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\agent.js":"28","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\metrics.js":"29","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\connectPrompts.js":"30","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\contactFlows.js":"31","C:\\Users\\ssakthi8\\pega_ccp\\src\\utilities\\dataState.js":"32","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\styled-components\\page-paper.jsx":"33","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\styled-components\\table-cell.jsx":"34","C:\\Users\\ssakthi8\\pega_ccp\\src\\utilities\\date.js":"35","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\cf-prompt-block\\cd-prompt-block.jsx":"36","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\queue.js":"37","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\agent-status-table-row\\agent-status-table-row.jsx":"38","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\data-table\\data-table.jsx":"39","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\card-numeric-display\\card-numeric-display.jsx":"40","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\realtime-metrics\\metrics-line-graph\\metrics-line-graph.jsx":"41","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\realtime-metrics\\slot-display\\slot-display.jsx":"42","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\realtime-metrics\\agent-status-doughnut\\agent-status-doughnut.jsx":"43","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\realtime-metrics\\contacts-display\\contacts-display.jsx":"44","C:\\Users\\ssakthi8\\pega_ccp\\src\\utilities\\file.js":"45","C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\app-body\\app-body.jsx":"46"},{"size":500,"mtime":1625917500000,"results":"47","hashOfConfig":"48"},{"size":2376,"mtime":1625917500000,"results":"49","hashOfConfig":"48"},{"size":362,"mtime":1625917500000,"results":"50","hashOfConfig":"48"},{"size":427,"mtime":1625917500000,"results":"51","hashOfConfig":"48"},{"size":490,"mtime":1625917500000,"results":"52","hashOfConfig":"48"},{"size":2113,"mtime":1625917500000,"results":"53","hashOfConfig":"48"},{"size":2176,"mtime":1626077349547,"results":"54","hashOfConfig":"48"},{"size":2091,"mtime":1625917500000,"results":"55","hashOfConfig":"48"},{"size":1695,"mtime":1625917500000,"results":"56","hashOfConfig":"48"},{"size":18944,"mtime":1625917500000,"results":"57","hashOfConfig":"48"},{"size":8499,"mtime":1625917500000,"results":"58","hashOfConfig":"48"},{"size":3937,"mtime":1625917500000,"results":"59","hashOfConfig":"48"},{"size":5605,"mtime":1625917500000,"results":"60","hashOfConfig":"48"},{"size":6060,"mtime":1625917500000,"results":"61","hashOfConfig":"48"},{"size":628,"mtime":1625917500000,"results":"62","hashOfConfig":"48"},{"size":998,"mtime":1625949423040,"results":"63","hashOfConfig":"48"},{"size":9246,"mtime":1625940251926,"results":"64","hashOfConfig":"48"},{"size":524,"mtime":1625948245645,"results":"65","hashOfConfig":"48"},{"size":188,"mtime":1625917500000,"results":"66","hashOfConfig":"48"},{"size":183,"mtime":1625917500000,"results":"67","hashOfConfig":"48"},{"size":175,"mtime":1625917500000,"results":"68","hashOfConfig":"48"},{"size":534,"mtime":1625917500000,"results":"69","hashOfConfig":"48"},{"size":479,"mtime":1625917500000,"results":"70","hashOfConfig":"48"},{"size":855,"mtime":1625917500000,"results":"71","hashOfConfig":"48"},{"size":402,"mtime":1625917500000,"results":"72","hashOfConfig":"48"},{"size":709,"mtime":1625917500000,"results":"73","hashOfConfig":"48"},{"size":1714,"mtime":1625917500000,"results":"74","hashOfConfig":"48"},{"size":340,"mtime":1625917500000,"results":"75","hashOfConfig":"48"},{"size":8509,"mtime":1625917500000,"results":"76","hashOfConfig":"48"},{"size":1066,"mtime":1625917500000,"results":"77","hashOfConfig":"48"},{"size":3054,"mtime":1625917500000,"results":"78","hashOfConfig":"48"},{"size":140,"mtime":1625917500000,"results":"79","hashOfConfig":"48"},{"size":1577,"mtime":1625917500000,"results":"80","hashOfConfig":"48"},{"size":309,"mtime":1625917500000,"results":"81","hashOfConfig":"48"},{"size":644,"mtime":1625917500000,"results":"82","hashOfConfig":"48"},{"size":7436,"mtime":1625917500000,"results":"83","hashOfConfig":"48"},{"size":916,"mtime":1625917500000,"results":"84","hashOfConfig":"48"},{"size":9896,"mtime":1625917500000,"results":"85","hashOfConfig":"48"},{"size":3833,"mtime":1625917500000,"results":"86","hashOfConfig":"48"},{"size":1195,"mtime":1625917500000,"results":"87","hashOfConfig":"48"},{"size":4295,"mtime":1625917500000,"results":"88","hashOfConfig":"48"},{"size":1628,"mtime":1625917500000,"results":"89","hashOfConfig":"48"},{"size":3318,"mtime":1625917500000,"results":"90","hashOfConfig":"48"},{"size":1652,"mtime":1625917500000,"results":"91","hashOfConfig":"48"},{"size":483,"mtime":1625917500000,"results":"92","hashOfConfig":"48"},{"size":1793,"mtime":1626086571123,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"cjaigz",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"96"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"96"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"96"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"96"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"96"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"96"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ssakthi8\\pega_ccp\\src\\index.js",[],["194","195"],"C:\\Users\\ssakthi8\\pega_ccp\\src\\App.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\reportWebVitals.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\store.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\metadata.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\external\\external.jsx",["196","197","198","199"],"import { Component } from 'react';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport AppHeader from '../../components/app-header/app-header';\r\nimport AppFooter from '../../components/app-footer/app-footer';\r\nimport AWSCCPComponent from '../../components/aws-ccp/aws-ccp';\r\nimport MetricsPage from '../../pages/metrics/metrics';\r\nimport HistoricReportPage from '../../pages/historic-report/historic-report';\r\nimport AgentsPage from '../../pages/agents/agents';\r\nimport CTRReportPage from '../../pages/attribute-report/attribute-report';\r\nimport ContactFlowPromptsPage from '../contact-flow-prompts/contact-flow-prompts';\r\n\r\nimport styles from './external.module.sass';\r\n\r\nclass ExternalLayout extends Component {\r\n\r\n    render() {\r\n        return(\r\n            <div className={styles.page}>\r\n                <div className={styles.ccpWindow}>\r\n                    <div className={styles.routerContainer}>\r\n                        <Switch>\r\n                            <Route exact path=\"/external/realtime\">\r\n                                <MetricsPage agentView={false} />\r\n                            </Route>\r\n                            <Route exact path=\"/external/realtime/agent\">\r\n                                <MetricsPage agentView={true} />\r\n                            </Route>\r\n                            <Route path=\"/external/report\">\r\n                                <HistoricReportPage />\r\n                            </Route>\r\n                            <Route path=\"/external/agent\">\r\n                                <AgentsPage />\r\n                            </Route>\r\n                            <Route path=\"/external/attributes\">\r\n                                <CTRReportPage />\r\n                            </Route>\r\n                            <Route path=\"/external/contact-flow-prompts\">\r\n                                <ContactFlowPromptsPage />\r\n                            </Route>\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ExternalLayout;","C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\layout\\layout.jsx",["200","201","202","203","204","205","206","207"],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\initialState.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\index.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\metrics\\metrics.jsx",["208","209","210","211","212","213","214","215","216","217"],"import { Box, Button, Grid, FormControl, Select, InputLabel, MenuItem, Typography, Table, TableHead, TableRow, TableBody, TableContainer } from '@material-ui/core';\r\nimport { SyncOutlined } from '@material-ui/icons';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport DateFormat from 'dateformat';\r\nimport { BeatLoader } from 'react-spinners';\r\nimport AgentStatusDoughnut from '../../components/realtime-metrics/agent-status-doughnut/agent-status-doughnut';\r\nimport ContactsDisplay from '../../components/realtime-metrics/contacts-display/contacts-display';\r\nimport SlotDisplay from '../../components/realtime-metrics/slot-display/slot-display';\r\nimport MetricLineGraph from '../../components/realtime-metrics/metrics-line-graph/metrics-line-graph';\r\nimport PagePaperComponent from '../../components/styled-components/page-paper';\r\nimport NumericCard from '../../components/card-numeric-display/card-numeric-display';\r\nimport TableCell from '../../components/styled-components/table-cell';\r\nimport TimeHumanizer from \"humanize-duration\";\r\n\r\nimport { refreshHistoricMetrics, refreshRealtimeMetrics, refreshAgentStatus } from '../../redux/action/metrics';\r\nimport { refreshQueueList } from '../../redux/action/queue';\r\nimport DataState from '../../utilities/dataState';\r\n\r\nimport styles from './metrics.module.sass';\r\nimport { withRouter } from 'react-router';\r\n\r\nconst timeHumanize = TimeHumanizer.humanizer({\r\n    language: \"shortEn\",\r\n    languages: {\r\n        shortEn: {\r\n            y: ()=>'',\r\n            mo: ()=>'',\r\n            w: () => '',\r\n            d: () => '',\r\n            h: () => '',\r\n            m: () => '',\r\n            s: () => '',\r\n            ms: () => ''\r\n        }\r\n    },\r\n    delimiter: ':'\r\n})\r\n\r\nconst formatDuration = (ms) => {\r\n    const h = Math.floor(ms/3600000).toString().padStart(2, '0');\r\n    const m = Math.floor((ms - h*3600000)/60000).toString().padStart(2, '0');\r\n    const s = Math.floor((ms - h*3600000 - m*60000)/1000).toString().padStart(2, '0');\r\n    return `${h}:${m}:${s}`;\r\n}\r\n\r\nclass MetricsPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        console.log(this.props.history);\r\n\r\n        const state = {\r\n            selectedQueue: 'all',\r\n            timer: 1,\r\n            metrics: [\"AGENTS_AFTER_CONTACT_WORK\", \"AGENTS_AVAILABLE\", \"AGENTS_ERROR\", \"AGENTS_NON_PRODUCTIVE\", \"AGENTS_ON_CALL\", \"AGENTS_ONLINE\", \"AGENTS_STAFFED\", \"CONTACTS_IN_QUEUE\", \"CONTACTS_SCHEDULED\", \"OLDEST_CONTACT_AGE\", \"SLOTS_ACTIVE\", \"SLOTS_AVAILABLE\"]\r\n        }\r\n        if(this.props.agentView) {\r\n            state.metrics = [\"AGENTS_ON_CALL\", \"AGENTS_ONLINE\", \"AGENTS_NON_PRODUCTIVE\", \"CONTACTS_IN_QUEUE\", \"CONTACTS_SCHEDULED\", \"OLDEST_CONTACT_AGE\"];\r\n            state.agentView = true;\r\n        }\r\n\r\n        this.state = {...state}\r\n\r\n        this.trigRefreshHistoricMetrics = this.trigRefreshHistoricMetrics.bind(this);\r\n        this.selectQueue = this.selectQueue.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.agentView)\r\n        if(this.props.agentView) {\r\n            this.setState({\r\n                metrics: [\"AGENTS_ON_CALL\", \"AGENTS_ONLINE\", \"AGENTS_NON_PRODUCTIVE\", \"CONTACTS_IN_QUEUE\", \"CONTACTS_SCHEDULED\", \"OLDEST_CONTACT_AGE\"],\r\n                agentView: true\r\n            });\r\n        }\r\n        \r\n\r\n        this.props.refreshQueueList();\r\n        // this.trigRefreshHistoricMetrics();\r\n\r\n        this.secondsInterval = setInterval(() => {\r\n            if(this.state.timer - 1 == 0){\r\n                this.props.refreshRealtimeMetrics();\r\n                this.setState({\r\n                    timer: 15\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    timer: this.state.timer - 1\r\n                });\r\n            } \r\n        }, 1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.secondsInterval);\r\n    }\r\n\r\n    trigRefreshHistoricMetrics() {\r\n        this.setState({\r\n            timer: 15\r\n        })\r\n        // this.props.refreshHistoricMetrics();\r\n        this.props.refreshRealtimeMetrics();\r\n        // this.props.refreshAgentStatus();\r\n    }\r\n\r\n    selectQueue(queueName) {\r\n        this.setState({\r\n            selectedQueue: queueName\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <PagePaperComponent\r\n                header=\"Real Time Metrics\"\r\n                headerButton={\r\n                    <></>\r\n                }\r\n                compact={true}\r\n            >\r\n                <Box className={styles.optionsBox} style={{float: this.state.agentView ? 'right' : 'inherit'}}>\r\n                    {\r\n                        !this.state.agentView && <FormControl>\r\n                            <InputLabel>Queue</InputLabel>\r\n                            <Select variant=\"standard\" defaultValue={\"all\"} className={styles.queueSelector} onChange={({target})=>this.selectQueue(target.value)} >\r\n                                <MenuItem value={\"all\"}>All</MenuItem>\r\n                                {\r\n                                    this.props.queues.list.map((queue, i) =>\r\n                                        <MenuItem value={queue.name}>{queue.name}</MenuItem>\r\n                                    )\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    }\r\n                    <div>\r\n                        <Typography style={{display: 'inline', marginRight: '15px'}} variant=\"body2\">Refreshing in {this.state.timer}s</Typography>\r\n                        <Button size=\"small\" variant=\"contained\" color=\"primary\" startIcon={<SyncOutlined />} onClick={this.trigRefreshHistoricMetrics}>Refresh</Button>\r\n                    </div>\r\n                </Box>\r\n                <Grid container spacing={1} justify=\"center\" alignItems=\"stretch\">\r\n                    {\r\n                        this.props.realtimeDataState == DataState.LOADING && <Grid item xs={2}>\r\n                            <BeatLoader color=\"#86bc25\" />\r\n                        </Grid>\r\n                    }\r\n                {\r\n                    (this.props.realtimeDataState == DataState.OK && this.props.realtimeMetrics) && \r\n                    <>\r\n                        <TableContainer>\r\n                            <Table size=\"small\">\r\n                                {\r\n                                    this.props.agentView && <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell colSpan={2}>AGENT METRICS</TableCell>\r\n                                            <TableCell colSpan={2}>QUEUE METRICS</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                }\r\n                                <TableBody>\r\n                                    {\r\n                                        (this.props.realtimeMetrics[this.state.selectedQueue] && this.props.agentView) && <>\r\n                                            <TableRow>\r\n                                                <TableCell width=\"115px\">AGENTS ONLINE</TableCell>\r\n                                                <TableCell width=\"15px\">{this.props.realtimeMetrics[this.state.selectedQueue]['AGENTS_ONLINE']}</TableCell>\r\n                                                <TableCell>CALLS WAITING IN QUEUE</TableCell>\r\n                                                <TableCell>{this.props.realtimeMetrics[this.state.selectedQueue]['CONTACTS_IN_QUEUE']}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>AGENTS ON CALL</TableCell>\r\n                                                <TableCell>{this.props.realtimeMetrics[this.state.selectedQueue]['AGENTS_ON_CALL']}</TableCell>\r\n                                                <TableCell rowSpan={2}>OLDEST CALL WAITING IN QUEUE (HH:MM:SS)</TableCell>\r\n                                                <TableCell rowSpan={2}>{formatDuration(parseInt(this.props.realtimeMetrics[this.state.selectedQueue]['OLDEST_CONTACT_AGE']))}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell>AGENTS AVAILABLE</TableCell>\r\n                                                <TableCell>{this.props.realtimeMetrics[this.state.selectedQueue]['AGENTS_AVAILABLE']}</TableCell>\r\n                                                {/* <TableCell></TableCell>\r\n                                                <TableCell></TableCell> */}\r\n                                            </TableRow>\r\n                                        </>\r\n                                    }\r\n                                    {\r\n                                        (this.props.realtimeMetrics[this.state.selectedQueue] && !this.props.agentView) && \r\n                                                <>{\r\n                                                    this.state.metrics\r\n                                                        .reduce((prev, curr, i) => {\r\n                                                            if(!prev[Math.floor((i)/2)]){\r\n                                                                prev.push([]);\r\n                                                            }\r\n                                                            prev[prev.length - 1].push(curr);\r\n                                                            return prev;\r\n                                                        }, [])\r\n                                                        .map((headerArr) => <TableRow>\r\n                                                            {\r\n                                                                headerArr.map((header) => <>\r\n                                                                    <TableCell>{header}</TableCell>\r\n                                                                    <TableCell>{this.props.realtimeMetrics[this.state.selectedQueue][header]}</TableCell>\r\n                                                                </>)\r\n                                                            }\r\n                                                        </TableRow>)\r\n                                                }</>\r\n                                    }\r\n                                    {\r\n                                        !this.props.realtimeMetrics[this.state.selectedQueue] && <>\r\n                                            <TableRow>\r\n                                                <TableCell align=\"center\">No Data Found</TableCell>\r\n                                            </TableRow>\r\n                                        </>\r\n                                    }\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n\r\n                        {/* <Grid item>\r\n\r\n                        </Grid> */}\r\n                        {/* <TableContainer>\r\n                            <Table size=\"small\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        {\r\n                                            this.state.metrics\r\n                                                .map((metricLabel) => <TableCell style={{width: '75px'}}>{metricLabel}</TableCell>)\r\n                                        }\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        {\r\n                                            this.state.metrics.map((metricLabel) => <TableCell>{this.props.realtimeMetrics[this.state.selectedQueue][metricLabel]}</TableCell>)\r\n                                        }\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer> */}\r\n                        {/* <Grid item xs className={styles.gridItems}>\r\n                            <NumericCard\r\n                                header=\"Agents on Call\"\r\n                                value={this.props.realtimeMetrics[this.state.selectedQueue]['AGENTS_ON_CALL']}\r\n                            ></NumericCard>\r\n                        </Grid>\r\n                        <Grid item xs className={styles.gridItems}>\r\n                            <NumericCard\r\n                                header=\"Agents Online\"\r\n                                value={this.props.realtimeMetrics[this.state.selectedQueue]['AGENTS_ONLINE']}\r\n                            ></NumericCard>\r\n                        </Grid>\r\n                        <Grid item xs className={styles.gridItems}>\r\n                            <NumericCard\r\n                                header=\"Contacts Queued\"\r\n                                value={this.props.realtimeMetrics[this.state.selectedQueue]['CONTACTS_IN_QUEUE']}\r\n                            ></NumericCard>\r\n                        </Grid>\r\n                        <Grid item xs className={styles.gridItems}>\r\n                            <NumericCard\r\n                                header=\"Contacts Scheduled\"\r\n                                value={this.props.realtimeMetrics[this.state.selectedQueue]['CONTACTS_SCHEDULED']}\r\n                            ></NumericCard>\r\n                        </Grid>\r\n                        <Grid item xs className={styles.gridItems}>\r\n                            <NumericCard\r\n                                header=\"Oldest Contact Age\"\r\n                                value={this.props.realtimeMetrics[this.state.selectedQueue]['OLDEST_CONTACT_AGE'] == 0 ? '-' :this.props.realtimeMetrics[this.state.selectedQueue]['OLDEST_CONTACT_AGE']}\r\n                            ></NumericCard>\r\n                        </Grid> */}\r\n                        {/* <Grid item xs={4} className={styles.gridItems}>\r\n                            {\r\n                                <AgentStatusDoughnut\r\n                                    data={this.props.agentStatus[this.state.selectedQueue] || {}}\r\n                                    loading={this.props.agentStatusState === DataState.LOADING}\r\n                                />\r\n                            }\r\n                        </Grid>\r\n                        <Grid item xs={8} className={styles.gridItems}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={4}>\r\n                                    <ContactsDisplay queue={this.state.selectedQueue} />\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <SlotDisplay queue={this.state.selectedQueue} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={4} className={styles.gridItems}>\r\n                            <MetricLineGraph\r\n                                loading={this.props.historicDataState === DataState.LOADING}\r\n                                header={\"Contacts Handled\"}\r\n                                xAxis={this.props.historicMetrics.map((entry) => DateFormat(new Date(`${entry[\"e\"]} GMT`), \"h':'MM\"))}\r\n                                yAxis={this.props.historicMetrics.map((entry) => (entry[this.state.selectedQueue] || {})[\"CONTACTS_HANDLED\"] || 0)}\r\n                                thresholds={[5]}\r\n                                lineColor=\"#86bc25\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={4} className={styles.gridItems}>\r\n                            <MetricLineGraph\r\n                                loading={this.props.historicDataState === DataState.LOADING}\r\n                                header={\"Contacts Abandoned\"}\r\n                                xAxis={this.props.historicMetrics.map((entry) => DateFormat(new Date(`${entry[\"e\"]} GMT`), \"h':'MM\"))}\r\n                                yAxis={this.props.historicMetrics.map((entry) => (entry[this.state.selectedQueue] || {})[\"CONTACTS_ABANDONED\"] || 0)}\r\n                                thresholds={[1]}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={4} className={styles.gridItems}>\r\n                            <MetricLineGraph\r\n                                loading={this.props.historicDataState === DataState.LOADING}\r\n                                header={\"Contacts Abandoned\"}\r\n                                xAxis={this.props.historicMetrics.map((entry) => DateFormat(new Date(`${entry[\"e\"]} GMT`), \"h':'MM\"))}\r\n                                yAxis={this.props.historicMetrics.map((entry) => (entry[this.state.selectedQueue] || {})[\"CONTACTS_ABANDONED\"] || 0)}\r\n                                thresholds={[1]}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={4} className={styles.gridItems}>\r\n                            <MetricLineGraph\r\n                                loading={this.props.historicDataState === DataState.LOADING}\r\n                                header={\"Avg Queued Time\"}\r\n                                xAxis={this.props.historicMetrics.map((entry) => DateFormat(new Date(`${entry[\"e\"]} GMT`), \"h':'MM\"))}\r\n                                yAxis={this.props.historicMetrics.map((entry) => (entry[this.state.selectedQueue] || {})[\"QUEUE_ANSWER_TIME\"] || 0)}\r\n                                thresholds={[2]}\r\n                            />\r\n                        </Grid> */}\r\n                    </>\r\n                }\r\n                </Grid>\r\n            </PagePaperComponent>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        queues: state.queues,\r\n\r\n        historicMetrics: state.metrics.historic,\r\n        historicDataState: state.metrics.historicDataState,\r\n\r\n        realtimeMetrics: state.metrics.realtime,\r\n        realtimeDataState: state.metrics.realtimeDataState,\r\n        \r\n        agentStatus: state.metrics.agentStatus,\r\n        agentStatusState: state.metrics.agentStatusState\r\n    } \r\n}\r\n\r\nconst mapActionToProps = (dispatch) => ({\r\n    refreshQueueList: () => dispatch(refreshQueueList()),\r\n    refreshHistoricMetrics: () => dispatch(refreshHistoricMetrics()),\r\n    refreshRealtimeMetrics: () => dispatch(refreshRealtimeMetrics()),\r\n    refreshAgentStatus: () => dispatch(refreshAgentStatus())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withRouter(MetricsPage));","C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\historic-report\\historic-report.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\agents\\agents.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\contact-flow-prompts\\contact-flow-prompts.jsx",["218","219","220","221","222","223","224","225","226"],"import { Button, Table, TableBody, TableContainer, TableHead, TableRow, TextField, FormControl, InputLabel, Select, Menu, FormHelperText, MenuItem, Grid } from '@material-ui/core';\r\nimport { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport DateFormat from 'dateformat';\r\nimport { Visibility } from '@material-ui/icons';\r\nimport { BeatLoader } from 'react-spinners';\r\n\r\nimport CFPromptBlock from '../../components/cf-prompt-block/cd-prompt-block';\r\nimport { fetchContactFlows, fetchContactFlowPrompts } from '../../redux/action/contactFlows';\r\nimport { fetchConnectPrompts } from '../../redux/action/connectPrompts';\r\nimport DataState from '../../utilities/dataState';\r\nimport PagePaperComponent from '../../components/styled-components/page-paper';\r\n\r\nimport styles from './contact-flow-prompts.module.sass';\r\n\r\nclass ContactFlowPromptsPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            formIsDirty: false,\r\n            contactFlow: null\r\n        }\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.fetchContactFlowBlocks = this.fetchContactFlowBlocks.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchContactFlows();\r\n        this.props.fetchConnectPrompts();\r\n    }\r\n\r\n    handleInputChange({target}) {\r\n        console.log(target.value)\r\n        this.setState({\r\n            [target.name]: target.value\r\n        })\r\n    }\r\n\r\n    fetchContactFlowBlocks() {\r\n        if(this.state.contactFlow) {\r\n            this.props.fetchContactFlowPrompts(this.state.contactFlow);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <PagePaperComponent header=\"Contact Flow Prompts\">\r\n                <Fragment>\r\n                    <form noValidate>\r\n                        <div className={styles.formRow}>\r\n                            {\r\n                                this.props.contactFlowsListState !== DataState.LOADING && <FormControl\r\n                                    error={this.state.formIsDirty && !this.state.contactFlow}\r\n                                    className={styles.formElement}\r\n                                    required>\r\n                                    <InputLabel>Contact Flows</InputLabel>\r\n                                    <Select name=\"contactFlow\" onChange={this.handleInputChange}>\r\n                                        {\r\n                                            this.props.contactFlowsList.map((flow) => <MenuItem value={flow.id}>{flow.name}</MenuItem>)\r\n                                        }\r\n                                    </Select>\r\n                                    {\r\n                                        (this.state.formIsDirty && !this.state.contactFlow) &&\r\n                                        <FormHelperText>The field is required</FormHelperText>\r\n                                    }\r\n                                </FormControl>\r\n                            }\r\n                            {\r\n                                this.props.contactFlowsListState === DataState.OK && <Button\r\n                                    onClick={this.fetchContactFlowBlocks}\r\n                                    className={styles.submitButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    startIcon={<Visibility />}\r\n                                >View</Button>\r\n                            }\r\n                        </div>\r\n                    </form>\r\n                    {\r\n                        (this.props.contactFlowsListState === DataState.LOADING || this.props.contactFlowPromptListState === DataState.LOADING) && <div className={styles.loader}>\r\n                            <BeatLoader color=\"#86bc25\" />\r\n                        </div>\r\n                    }\r\n                    {\r\n                        <Grid container>\r\n                            {\r\n                                this.props.contactFlowPromptListState == DataState.OK &&\r\n                                this.props.contactFlowPromptList.map((_prompt) => <Grid item xs={12} className={styles.prompt}>\r\n                                    <CFPromptBlock\r\n                                        contactFlowId={this.state.contactFlow}\r\n                                        blockId={_prompt.id}\r\n                                        blockType={_prompt.blockType}\r\n                                        type={_prompt.type}\r\n                                        value={_prompt.value}\r\n                                        dynamic={String(_prompt.dynamic)}\r\n                                    />\r\n                                </Grid>)\r\n                            }\r\n                        </Grid>\r\n                    }\r\n                    \r\n                </Fragment>\r\n            </PagePaperComponent>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    contactFlowsList: state.contactFlows.list,\r\n    contactFlowsListState: state.contactFlows.listState,\r\n    contactFlowPromptList: state.contactFlows.promptList,\r\n    contactFlowPromptListState: state.contactFlows.promptListState\r\n\r\n});\r\n\r\nconst mapActionToProps = (dispatch) => ({\r\n    fetchContactFlows: () => dispatch(fetchContactFlows()),\r\n    fetchConnectPrompts: () => dispatch(fetchConnectPrompts()),\r\n    fetchContactFlowPrompts: (contactFlowId) => dispatch(fetchContactFlowPrompts(contactFlowId))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(ContactFlowPromptsPage);","C:\\Users\\ssakthi8\\pega_ccp\\src\\pages\\attribute-report\\attribute-report.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\index.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\app-header\\app-header.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\aws-ccp\\aws-ccp.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\app-footer\\app-footer.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\contact.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\agent.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\utilities\\ccp-state.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\connectPrompts.js",["227"],"import initialState from \"../initialState\";\r\nimport { ConnectPromptsActions } from '../action';\r\n\r\nconst connectPromptsReducer = (state = initialState.connectPrompts, action) => {\r\n\r\n    const _state = {...state};\r\n\r\n    if(action.type == ConnectPromptsActions.SET_CONNECT_PROMPTS) {\r\n        _state.list = [...action.payload];\r\n    }\r\n\r\n    if(action.type === ConnectPromptsActions.SET_CONNECT_PROMPTS_VISIBILITY) {\r\n        _state.listState = action.payload\r\n    }\r\n\r\n    return _state;\r\n\r\n}\r\n\r\nexport default connectPromptsReducer;","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\queue.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\contactFlows.js",["228","229","230"],"import initialState from \"../initialState\";\r\nimport { ContactFlowsActions } from '../action';\r\nimport DataState from \"../../utilities/dataState\";\r\n\r\nconst contactFlowsReducer = (state = initialState.contactFlows, action) => {\r\n\r\n    const _state = {...state};\r\n\r\n    if(action.type == ContactFlowsActions.SET_CONTACT_FLOWS_LIST) {\r\n        _state.list = [...action.payload];\r\n    }\r\n\r\n    if(action.type === ContactFlowsActions.SET_CONTACT_FLOWS_LIST_VISIBILITY) {\r\n        _state.listState = action.payload\r\n    }\r\n\r\n    if(action.type === ContactFlowsActions.SET_CONTACT_FLOW_PROMPTS) {\r\n        _state.promptList = [...action.payload];\r\n    }\r\n\r\n    if(action.type == ContactFlowsActions.SET_CONTACT_FLOW_PROMPTS_VISIBILITY) {\r\n        _state.promptListState = action.payload;\r\n    }   \r\n\r\n    return _state;\r\n\r\n}\r\n\r\nexport default contactFlowsReducer;","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\contact.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\metadata.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\metrics.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\reducer\\agent.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\metrics.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\connectPrompts.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\contactFlows.js",["231"],"import { ContactFlowsActions } from '../action';\r\nimport DataState from '../../utilities/dataState';\r\nimport axios from 'axios';\r\n\r\nconst setContactFlowsList = (list) => ({\r\n    type: ContactFlowsActions.SET_CONTACT_FLOWS_LIST,\r\n    payload: list\r\n});\r\n\r\nconst setContactFlowsListState = (state) => ({\r\n    type: ContactFlowsActions.SET_CONTACT_FLOWS_LIST_VISIBILITY,\r\n    payload: state\r\n});\r\n\r\nconst setContactFlowPromptsList = (list) => ({\r\n    type: ContactFlowsActions.SET_CONTACT_FLOW_PROMPTS,\r\n    payload: list\r\n});\r\n\r\nconst setContactFlowPromptsListState = (state) => ({\r\n    type: ContactFlowsActions.SET_CONTACT_FLOW_PROMPTS_VISIBILITY,\r\n    payload: state\r\n});\r\n\r\nexport const fetchContactFlows = () => {\r\n    \r\n    return (dispatch, getState) => {\r\n        \r\n        const {metadata: {api: {endpoint, basepath}, connect: {instance: {id}}}} = getState();\r\n\r\n        dispatch(setContactFlowsListState(DataState.LOADING));\r\n\r\n        axios.get(`${endpoint}${basepath}/${id}/contact-flows`)\r\n            .then((res) => {\r\n                const contactFlows = res.data.contactFlows.sort((a, b) => a.name.localeCompare(b.name));\r\n                dispatch(setContactFlowsList(contactFlows));\r\n                dispatch(setContactFlowsListState(DataState.OK));\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const fetchContactFlowPrompts = (contactFlowId) => {\r\n    \r\n    return (dispatch, getState) => {\r\n        \r\n        const {metadata: {api: {endpoint, basepath}, connect: {instance: {id}}}} = getState();\r\n\r\n        dispatch(setContactFlowPromptsListState(DataState.LOADING));\r\n\r\n        axios.get(`${endpoint}${basepath}/${id}/contact-flows/${contactFlowId}`)\r\n            .then((res) => {\r\n                const contactFlowPrompts = res.data.prompts\r\n                    .filter((p) => p.type != 'PromptId' && !p.dynamic)\r\n                    .map((p) => ({...p, value: typeof p.value === 'string' ? p.value : p.value.name}))\r\n                    .sort((a, b) => a.id.localeCompare(b.id));\r\n                dispatch(setContactFlowPromptsList(contactFlowPrompts));\r\n                dispatch(setContactFlowPromptsListState(DataState.OK));\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const updateContactFlowBlock = (contactFlowId, blockId, type, value, dynamic, connectPromptName) => {\r\n\r\n    return (dispatch, getState) => {\r\n        \r\n        const {metadata: {api: {endpoint, basepath}, connect: {instance: {id}}}} = getState();\r\n\r\n        dispatch(setContactFlowPromptsListState(DataState.LOADING));\r\n\r\n        axios.put(`${endpoint}${basepath}/${id}/contact-flows/${contactFlowId}/${blockId}`, {\r\n            type,\r\n            value,\r\n            dynamic,\r\n            promptName: connectPromptName\r\n        }).then((res) => {\r\n            dispatch(fetchContactFlowPrompts(contactFlowId));\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n\r\n    }\r\n\r\n}","C:\\Users\\ssakthi8\\pega_ccp\\src\\utilities\\dataState.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\styled-components\\page-paper.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\styled-components\\table-cell.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\utilities\\date.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\cf-prompt-block\\cd-prompt-block.jsx",["232","233","234","235","236","237","238","239","240","241"],"import { Box, Button, Card, CardHeader, CardContent, Typography, FormControl, FormLabel, RadioGroup, FormControlLabel, Radio, Grid, TextField, InputLabel, Select, MenuItem, FormHelperText } from '@material-ui/core';\r\nimport { SendOutlined } from '@material-ui/icons';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport equal from 'deep-equal';\r\n\r\nimport { updateContactFlowBlock } from '../../redux/action/contactFlows';\r\n\r\nimport styles from './cd-prompt-block.module.sass';\r\n\r\nclass CFPromptBlock extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const { type, value, dynamic } = this.props;\r\n        this.state = {type, dynamic, value, dirty: false};\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.updateBlock = this.updateBlock.bind(this);\r\n    }\r\n\r\n    handleInputChange({target}) {\r\n        this.setState({\r\n            [target.name]: target.value,\r\n            dirty: true\r\n        }, () => {\r\n            const currentState = { type: this.state.type, value: this.state.value, dynamic: this.state.dynamic };\r\n            let { type, value, dynamic } = this.props;\r\n            const original = { type, value, dynamic };\r\n            if(equal(original, currentState)){\r\n                this.setState({\r\n                    dirty: false\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    updateBlock(e) {\r\n        e.preventDefault();\r\n        let connectPromptName = null;\r\n        if(this.state.type == 'PromptId' && this.state.dynamic == 'false') {\r\n            connectPromptName = this.props.connectPrompts.find((connectPrompt) => connectPrompt.arn == this.state.value).name;\r\n        }\r\n        this.props.updateContactFlowBlock(this.props.contactFlowId, this.props.blockId, this.state.type, this.state.value, this.state.dynamic == 'true', connectPromptName);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Card className={styles.root} elevation={1}>\r\n                <Box className={styles.header}>\r\n                    <Typography variant=\"h6\">{this.props.blockTypeLabel[this.props.blockType]}</Typography>\r\n                </Box>\r\n                <Box className={styles.body}>\r\n                    <form noValidate>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={4}>\r\n                                {\r\n                                    this.state.type == 'PromptId' && <FormHelperText className={styles.audioAlert}>An Audio has been currently used</FormHelperText>\r\n                                }\r\n                                <div className={styles.formRow}>\r\n                                    <FormControl component=\"fieldset\">\r\n                                        <FormLabel component=\"legend\" className={styles.FormLabel}>Type</FormLabel>\r\n                                        <RadioGroup row name=\"type\" value={this.state.type} onChange={this.handleInputChange}>\r\n                                            {/* <FormControlLabel value=\"PromptId\" control={<Radio color=\"primary\" size=\"small\" />} label=\"Prompt\" /> */}\r\n                                            <FormControlLabel value=\"Text\" control={<Radio color=\"primary\" size=\"small\" />} label=\"Text\" />\r\n                                            <FormControlLabel value=\"SSML\" control={<Radio color=\"primary\" size=\"small\" />} label=\"SSML (Speech Synthesis Markup Language)\" />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </div>\r\n                                {/* <div className={styles.formRow}>\r\n                                    <FormControl component=\"fieldset\">\r\n                                        <FormLabel component=\"legend\" className={styles.FormLabel}>Dynamic</FormLabel>\r\n                                        <RadioGroup row name=\"dynamic\" value={this.state.dynamic} onChange={this.handleInputChange}>\r\n                                            <FormControlLabel value=\"true\" control={<Radio color=\"primary\" size=\"small\" />} label=\"Yes\" />\r\n                                            <FormControlLabel value=\"false\" control={<Radio color=\"primary\" size=\"small\" />} label=\"No\" />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </div> */}\r\n                                <Button\r\n                                    onClick={this.updateBlock}\r\n                                    className={styles.submitButton}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled={!this.state.dirty}\r\n                                    startIcon={<SendOutlined />}\r\n                                >Update</Button>\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                <TextField\r\n                                    label=\"Current Value\"\r\n                                    multiline fullWidth\r\n                                    rows={6}\r\n                                    value={this.props.value}\r\n                                    disabled\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                                {\r\n                                    // !(this.state.type == 'PromptId' && this.state.dynamic == 'false') &&\r\n                                    <TextField\r\n                                        label=\"Value\"\r\n                                        multiline fullWidth\r\n                                        rows={6}\r\n                                        value={this.state.value}\r\n                                        name=\"value\"\r\n                                        onChange={this.handleInputChange}\r\n                                    />\r\n                                }\r\n                                {/* {\r\n                                    (this.state.type == 'PromptId' && this.state.dynamic == 'false') && <FormControl fullWidth>\r\n                                        <InputLabel>Prompts</InputLabel>\r\n                                        <Select name=\"value\" onChange={this.handleInputChange}>\r\n                                            {\r\n                                                this.props.connectPrompts.map((connectPrompt) => <MenuItem value={connectPrompt.arn}>{connectPrompt.name}</MenuItem>)\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                } */}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Box>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nconst connectStateToProps = (state) => ({\r\n    connectPrompts: state.connectPrompts.list,\r\n    blockTypeLabel: state.metadata.contactFlows.blockTypeLabel\r\n});\r\n\r\nconst connectDispatchToProps = (dispatch) => ({\r\n    updateContactFlowBlock: (contactFlowId, blockId, type, value, dynamic, connectPromptName) => dispatch(updateContactFlowBlock(contactFlowId, blockId, type, value, dynamic, connectPromptName))\r\n})\r\n\r\nexport default connect(connectStateToProps, connectDispatchToProps)(CFPromptBlock);","C:\\Users\\ssakthi8\\pega_ccp\\src\\redux\\action\\queue.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\agent-status-table-row\\agent-status-table-row.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\data-table\\data-table.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\card-numeric-display\\card-numeric-display.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\realtime-metrics\\metrics-line-graph\\metrics-line-graph.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\realtime-metrics\\slot-display\\slot-display.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\realtime-metrics\\agent-status-doughnut\\agent-status-doughnut.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\realtime-metrics\\contacts-display\\contacts-display.jsx",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\utilities\\file.js",[],"C:\\Users\\ssakthi8\\pega_ccp\\src\\components\\app-body\\app-body.jsx",["242","243","244","245","246"],{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","severity":1,"message":"252","line":2,"column":24,"nodeType":"253","messageId":"254","endLine":2,"endColumn":30},{"ruleId":"251","severity":1,"message":"255","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":17},{"ruleId":"251","severity":1,"message":"256","line":5,"column":8,"nodeType":"253","messageId":"254","endLine":5,"endColumn":17},{"ruleId":"251","severity":1,"message":"257","line":6,"column":8,"nodeType":"253","messageId":"254","endLine":6,"endColumn":23},{"ruleId":"251","severity":1,"message":"252","line":2,"column":24,"nodeType":"253","messageId":"254","endLine":2,"endColumn":30},{"ruleId":"251","severity":1,"message":"258","line":2,"column":32,"nodeType":"253","messageId":"254","endLine":2,"endColumn":38},{"ruleId":"251","severity":1,"message":"259","line":2,"column":40,"nodeType":"253","messageId":"254","endLine":2,"endColumn":45},{"ruleId":"251","severity":1,"message":"260","line":7,"column":8,"nodeType":"253","messageId":"254","endLine":7,"endColumn":19},{"ruleId":"251","severity":1,"message":"261","line":8,"column":8,"nodeType":"253","messageId":"254","endLine":8,"endColumn":26},{"ruleId":"251","severity":1,"message":"262","line":9,"column":8,"nodeType":"253","messageId":"254","endLine":9,"endColumn":18},{"ruleId":"251","severity":1,"message":"263","line":10,"column":8,"nodeType":"253","messageId":"254","endLine":10,"endColumn":21},{"ruleId":"251","severity":1,"message":"264","line":11,"column":8,"nodeType":"253","messageId":"254","endLine":11,"endColumn":30},{"ruleId":"251","severity":1,"message":"265","line":5,"column":8,"nodeType":"253","messageId":"254","endLine":5,"endColumn":18},{"ruleId":"251","severity":1,"message":"266","line":7,"column":8,"nodeType":"253","messageId":"254","endLine":7,"endColumn":27},{"ruleId":"251","severity":1,"message":"267","line":8,"column":8,"nodeType":"253","messageId":"254","endLine":8,"endColumn":23},{"ruleId":"251","severity":1,"message":"268","line":9,"column":8,"nodeType":"253","messageId":"254","endLine":9,"endColumn":19},{"ruleId":"251","severity":1,"message":"269","line":10,"column":8,"nodeType":"253","messageId":"254","endLine":10,"endColumn":23},{"ruleId":"251","severity":1,"message":"270","line":12,"column":8,"nodeType":"253","messageId":"254","endLine":12,"endColumn":19},{"ruleId":"251","severity":1,"message":"271","line":23,"column":7,"nodeType":"253","messageId":"254","endLine":23,"endColumn":19},{"ruleId":"272","severity":1,"message":"273","line":84,"column":37,"nodeType":"274","messageId":"275","endLine":84,"endColumn":39},{"ruleId":"272","severity":1,"message":"273","line":146,"column":54,"nodeType":"274","messageId":"275","endLine":146,"endColumn":56},{"ruleId":"272","severity":1,"message":"273","line":151,"column":51,"nodeType":"274","messageId":"275","endLine":151,"endColumn":53},{"ruleId":"251","severity":1,"message":"276","line":1,"column":18,"nodeType":"253","messageId":"254","endLine":1,"endColumn":23},{"ruleId":"251","severity":1,"message":"277","line":1,"column":25,"nodeType":"253","messageId":"254","endLine":1,"endColumn":34},{"ruleId":"251","severity":1,"message":"278","line":1,"column":36,"nodeType":"253","messageId":"254","endLine":1,"endColumn":50},{"ruleId":"251","severity":1,"message":"279","line":1,"column":52,"nodeType":"253","messageId":"254","endLine":1,"endColumn":61},{"ruleId":"251","severity":1,"message":"280","line":1,"column":63,"nodeType":"253","messageId":"254","endLine":1,"endColumn":71},{"ruleId":"251","severity":1,"message":"281","line":1,"column":73,"nodeType":"253","messageId":"254","endLine":1,"endColumn":82},{"ruleId":"251","severity":1,"message":"282","line":1,"column":117,"nodeType":"253","messageId":"254","endLine":1,"endColumn":121},{"ruleId":"251","severity":1,"message":"265","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":18},{"ruleId":"272","severity":1,"message":"273","line":90,"column":71,"nodeType":"274","messageId":"275","endLine":90,"endColumn":73},{"ruleId":"272","severity":1,"message":"273","line":8,"column":20,"nodeType":"274","messageId":"275","endLine":8,"endColumn":22},{"ruleId":"251","severity":1,"message":"283","line":3,"column":8,"nodeType":"253","messageId":"254","endLine":3,"endColumn":17},{"ruleId":"272","severity":1,"message":"273","line":9,"column":20,"nodeType":"274","messageId":"275","endLine":9,"endColumn":22},{"ruleId":"272","severity":1,"message":"273","line":21,"column":20,"nodeType":"274","messageId":"275","endLine":21,"endColumn":22},{"ruleId":"272","severity":1,"message":"284","line":59,"column":43,"nodeType":"274","messageId":"275","endLine":59,"endColumn":45},{"ruleId":"251","severity":1,"message":"285","line":1,"column":29,"nodeType":"253","messageId":"254","endLine":1,"endColumn":39},{"ruleId":"251","severity":1,"message":"286","line":1,"column":41,"nodeType":"253","messageId":"254","endLine":1,"endColumn":52},{"ruleId":"251","severity":1,"message":"287","line":1,"column":144,"nodeType":"253","messageId":"254","endLine":1,"endColumn":154},{"ruleId":"251","severity":1,"message":"288","line":1,"column":156,"nodeType":"253","messageId":"254","endLine":1,"endColumn":162},{"ruleId":"251","severity":1,"message":"289","line":1,"column":164,"nodeType":"253","messageId":"254","endLine":1,"endColumn":172},{"ruleId":"272","severity":1,"message":"273","line":41,"column":28,"nodeType":"274","messageId":"275","endLine":41,"endColumn":30},{"ruleId":"272","severity":1,"message":"273","line":41,"column":64,"nodeType":"274","messageId":"275","endLine":41,"endColumn":66},{"ruleId":"272","severity":1,"message":"273","line":42,"column":101,"nodeType":"274","messageId":"275","endLine":42,"endColumn":103},{"ruleId":"272","severity":1,"message":"273","line":44,"column":143,"nodeType":"274","messageId":"275","endLine":44,"endColumn":145},{"ruleId":"272","severity":1,"message":"273","line":58,"column":53,"nodeType":"274","messageId":"275","endLine":58,"endColumn":55},{"ruleId":"251","severity":1,"message":"277","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":17},{"ruleId":"251","severity":1,"message":"278","line":6,"column":8,"nodeType":"253","messageId":"254","endLine":6,"endColumn":22},{"ruleId":"251","severity":1,"message":"279","line":7,"column":8,"nodeType":"253","messageId":"254","endLine":7,"endColumn":17},{"ruleId":"251","severity":1,"message":"290","line":9,"column":8,"nodeType":"253","messageId":"254","endLine":9,"endColumn":13},{"ruleId":"251","severity":1,"message":"291","line":12,"column":7,"nodeType":"253","messageId":"254","endLine":12,"endColumn":16},"no-native-reassign",["292"],"no-negated-in-lhs",["293"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'AppHeader' is defined but never used.","'AppFooter' is defined but never used.","'AWSCCPComponent' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'MetricsPage' is defined but never used.","'HistoricReportPage' is defined but never used.","'AgentsPage' is defined but never used.","'CTRReportPage' is defined but never used.","'ContactFlowPromptsPage' is defined but never used.","'DateFormat' is defined but never used.","'AgentStatusDoughnut' is defined but never used.","'ContactsDisplay' is defined but never used.","'SlotDisplay' is defined but never used.","'MetricLineGraph' is defined but never used.","'NumericCard' is defined but never used.","'timeHumanize' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'TextField' is defined but never used.","'Menu' is defined but never used.","'DataState' is defined but never used.","Expected '!==' and instead saw '!='.","'CardHeader' is defined but never used.","'CardContent' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'Paper' is defined but never used.","'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]